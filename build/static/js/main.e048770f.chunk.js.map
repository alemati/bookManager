{"version":3,"sources":["services/books.js","reducers/notificationReducer.js","reducers/booksReducer.js","reducers/formReducer.js","reducers/selectedBookReducer.js","components/BookForm.js","components/BooksList.js","components/Notification.js","App.js","store.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","setNotification","content","dispatch","a","type","closeNotification","obj","reducer","state","action","concat","newState","filter","book","map","initialState","title","author","description","setForm","clearForm","clearSelectedBook","BookForm","useDispatch","form","useSelector","selectedBook","createNew","event","preventDefault","console","log","setTimeout","newBook","bookService","deleteSelectedBook","update","updatedBook","size","value","onChange","target","changeTitle","changeAuthor","cols","rows","changeDescription","className","onClick","BookLine","style","isSelected","handleClick","BooksList","books","Notification","notification","App","useEffect","booksFromServer","combineReducers","booksReducer","selectedBookReducer","formReducer","notificationReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e048770f.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/books'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteById = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteById }","const reducer = (state = null, action) => {\n   \n    switch (action.type) {\n      case ('SET_NOTIFICATION'):\n        return action.data\n      case ('CLOSE_NOTIFICATION'):\n        return null\n      default:\n    }\n  \n    return state\n  }\n  \n  export const setNotification = (content) => {\n    return async dispatch => {\n      const notification = {\n          'content': content,\n      }\n      dispatch({\n        type: 'SET_NOTIFICATION',\n        data: notification,\n      })\n    }\n  }\n  \n  export const closeNotification = obj => {\n    return async dispatch => {\n      dispatch({\n        type: 'CLOSE_NOTIFICATION',\n      })\n    }\n  }\n  \n  export default reducer","import bookService from '../services/books'\nimport { setNotification, closeNotification } from '../reducers/notificationReducer'\n\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case ('CREATE_NEW_BOOK'):\n            return state.concat(action.data)\n        case ('INIT_BOOKS'):\n            return action.data\n        case ('REMOVE_BOOK'):\n            const newState = state.filter(book => book.id !== action.data)\n            return newState\n        case ('UPDATE_BOOK'):\n            return state.map(book => book.id !== action.data.id ? book : action.data)\n        default:\n    }\n    return state\n}\n\nexport const initializeBooks = () => {\n    return async dispatch => {\n        const booksFromServer = await bookService.getAll()\n        dispatch({\n            type: 'INIT_BOOKS',\n            data: booksFromServer,\n        })\n    }\n}\n\nexport const createNewBook = (obj) => {\n    \n    return async dispatch => {\n        try {\n            const response = await bookService.create(obj)\n            dispatch({\n                type: 'CREATE_NEW_BOOK',\n                data: response,\n            })\n        } catch (e) {\n            dispatch(setNotification('Given input was way to long. Maximum length is 100 characters'))\n            setTimeout(() => {\n                dispatch(closeNotification())\n            }, 3000)\n            console.log('error caught in bookReducer', e)\n        }\n    }\n}\n\nexport const updateBook = (obj, id) => {\n    return async dispatch => {\n        const response = await bookService.update(id, obj)\n        dispatch({\n            type: 'UPDATE_BOOK',\n            data: response\n        })\n    }\n}\n\nexport const removeBook = (id) => {\n    return async dispatch => {\n        await bookService.deleteById(id)\n        dispatch({\n            type: 'REMOVE_BOOK',\n            data: id\n        })\n    }\n}\n\nexport default reducer","const initialState = { title: '', author: '', description: ''}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ('SET_FORM'):\n            return action.data\n        case ('CLEAR_FORM'):\n            return initialState\n        default:\n    }\n    return state\n}\n\nexport const setForm = (obj) => {\n    return async dispatch => {\n        dispatch({\n            type: 'SET_FORM',\n            data: obj,\n        })\n    }\n}\n\nexport const clearForm = () => {\n    return async dispatch => {\n        dispatch({\n            type: 'CLEAR_FORM',\n        })\n    }\n}\n\nexport default reducer","const reducer = (state = null, action) => {\n    switch (action.type) {\n        case ('SET_SELECTED_BOOK'):\n            return action.data\n        case ('CLEAR_SELECTED_BOOK'):\n            return null\n        default:\n    }\n    return state\n}\n\nexport const setSelectedBook = (obj) => {\n    return async dispatch => {\n        dispatch({\n            type: 'SET_SELECTED_BOOK',\n            data: obj,\n        })\n    }\n}\n\nexport const clearSelectedBook = () => {\n    return async dispatch => {\n        dispatch({\n            type: 'CLEAR_SELECTED_BOOK',\n        })\n    }\n}\n\nexport default reducer","import React from 'react'\nimport { createNewBook, removeBook, updateBook } from '../reducers/booksReducer'\nimport { setForm, clearForm } from '../reducers/formReducer'\nimport { clearSelectedBook } from '../reducers/selectedBookReducer'\nimport { setNotification, closeNotification} from '../reducers/notificationReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst BookForm = () => {\n    const dispatch = useDispatch()\n    const form = useSelector(state => state.form)\n    const selectedBook = useSelector(state => state.selectedBook)\n\n    const createNew = (event) => {\n        event.preventDefault()\n        if (form.title === '' || form.author === '' || form.description === '') {\n            console.log('Please fill all the inputs')\n            dispatch(setNotification('Please fill all the inputs'))\n            setTimeout(() => {\n                dispatch(closeNotification())\n            }, 3000)\n\n        } else {\n            const newBook = {\n                \"title\": form.title,\n                \"author\": form.author,\n                \"description\": form.description,\n            }\n            dispatch(createNewBook(newBook))\n            dispatch(clearForm())\n        }\n    }\n\n    const deleteSelectedBook = () => {\n        dispatch(removeBook(selectedBook.id))\n        dispatch(clearSelectedBook())\n        dispatch(clearForm())\n    }\n\n    const update = () => {\n        if (form.title === '' || form.author === '' || form.description === '') {\n            console.log('Please fill all the inputs')\n            dispatch(setNotification('Please fill all the inputs'))\n            setTimeout(() => {\n                dispatch(closeNotification())\n            }, 3000)\n        } else {\n            const updatedBook = {\n                \"id\": selectedBook.id,\n                \"title\": form.title,\n                \"author\": form.author,\n                \"description\": form.description,\n            }\n            dispatch(updateBook(updatedBook, selectedBook.id))\n            dispatch(clearSelectedBook())\n            dispatch(clearForm())\n        }\n    }\n\n    const changeTitle = (event) => {\n        dispatch(setForm({ ...form, title: event.target.value }))\n    }\n    const changeAuthor = (event) => {\n        dispatch(setForm({ ...form, author: event.target.value }))\n    }\n    const changeDescription = (event) => {\n        dispatch(setForm({ ...form, description: event.target.value }))\n    }\n\n    return (\n        <div>\n            <form>\n                Title: <br />\n                <input size=\"41\" type=\"text\" value={form.title} onChange={(event) => changeTitle(event)} />\n                <br />\n\n                Author: <br />\n                <input size=\"41\" type=\"text\" value={form.author} onChange={(event) => changeAuthor(event)} />\n                <br />\n\n                Description: <br />\n                <textarea cols={35} rows={5} value={form.description} onChange={(event) => changeDescription(event)} />\n                <br />\n            </form>\n\n            <div>\n                {selectedBook === null ?\n                    <div>\n                        <button className=\"button\" onClick={(event) => createNew(event)}>Save New</button>\n                        <button className=\"disabledButton\">Save</button>\n                        <button className=\"disabledButton\">Delete</button>\n                    </div>\n                    :\n                    <div>\n                        <button className=\"button\" onClick={(event) => createNew(event)}>Save New</button>\n                        <button className=\"button\" onClick={() => update()}>Save</button>\n                        <button className=\"deleteButton\" onClick={() => deleteSelectedBook()}>Delete</button>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default BookForm","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { clearSelectedBook, setSelectedBook } from '../reducers/selectedBookReducer'\nimport { setForm, clearForm } from '../reducers/formReducer'\n\n\nconst BooksList = () => {\n    const books = useSelector(state => state.books)\n    return (\n        <div>\n            All books: <br />\n            <div className=\"allBooks\">\n                {books.map(book => <BookLine key={book.id} book={book} />)}\n            </div>\n        </div>\n    )\n}\n\nconst BookLine = ({ book }) => {\n    const selectedBook = useSelector(state => state.selectedBook)\n    const dispatch = useDispatch()\n\n    let style;\n    if (selectedBook === null) {\n        style = \"listItem\"\n    } else {\n        const isSelected = selectedBook.id === book.id ? true : false\n        style = isSelected ? \"selectedItem\" : \"listItem\"\n    }\n\n    const handleClick = () => {\n        if (selectedBook === null || selectedBook.id !== book.id) {\n            dispatch(setSelectedBook(book))\n            dispatch(setForm({ title: book.title, author: book.author, description: book.description }))\n        } else {\n            dispatch(clearSelectedBook())\n            dispatch(clearForm())\n            style = \"listItem\"\n        }\n    }\n\n    return (\n        <div className={style} onClick={() => handleClick()}>\n            {book.title} <br />\n            by {book.author}\n            \n        </div>\n    )\n}\n\nexport default BooksList","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst Notification = () => {\n    const notification = useSelector(state => state.notification)\n    if (notification === null) {\n        return null\n    }\n    return (\n        <div className=\"notification\">\n            <p className=\"notificationText\"> {notification.content} </p>\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport BookForm from './components/BookForm'\nimport BooksList from './components/BooksList'\nimport Notification from './components/Notification'\nimport { initializeBooks } from './reducers/booksReducer'\nimport { useDispatch } from 'react-redux'\n\n\nconst App = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(initializeBooks())\n  }, [dispatch])\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"column\">\n          <BookForm />\n          <Notification />\n        </div>\n        <div className=\"column\">\n          <BooksList />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport booksReducer from './reducers/booksReducer'\nimport selectedBookReducer from './reducers/selectedBookReducer'\nimport formReducer from './reducers/formReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst reducer = combineReducers({\n    books: booksReducer,\n    selectedBook: selectedBookReducer,\n    form: formReducer,\n    notification: notificationReducer,\n})\n\nconst store = createStore(\n    reducer,\n    composeWithDevTools(\n        applyMiddleware(thunk)\n    )\n)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport { Provider } from 'react-redux' \nimport store from './store'\nimport './index.css' \n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}